/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License") you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.apache.nifi.encrypt

import org.bouncycastle.jce.provider.BouncyCastleProvider
import org.bouncycastle.util.encoders.Hex
import org.junit.After
import org.junit.Before
import org.junit.BeforeClass
import org.junit.Test
import org.junit.runner.RunWith
import org.junit.runners.JUnit4
import org.slf4j.Logger
import org.slf4j.LoggerFactory

import javax.crypto.Cipher
import javax.crypto.spec.IvParameterSpec
import javax.crypto.spec.SecretKeySpec
import java.security.MessageDigest
import java.security.Security

@RunWith(JUnit4.class)
class StringEncryptorGroovyTest extends GroovyTestCase {
    private static final Logger logger = LoggerFactory.getLogger(StringEncryptorGroovyTest.class)

    @BeforeClass
    public static void setUpOnce() throws Exception {
        Security.addProvider(new BouncyCastleProvider())

        logger.metaClass.methodMissing = { String name, args ->
            logger.info("[${name?.toUpperCase()}] ${(args as List).join(" ")}")
        }
    }

    @Before
    public void setUp() throws Exception {
    }

    @After
    public void tearDown() throws Exception {
    }

    @Test
    public void testJasyptDecryptionShouldAcceptExternallyGeneratedSalt() throws Exception {
        // Arrange
        final String EXPECTED_PROCESSOR_PASSWORD = "password123"

        // These values can be generated by running `$ ./openssl_brett_demo.rb` in the terminal
        final String MASTER_KEY = "mybigsecretkey"
        final String CIPHER_TEXT = "0123456789ABCDEFFEDCBA9876543210c1dbe71e7502949d6393cadfd4356634"
        byte[] cipherBytes = Hex.decode(CIPHER_TEXT)

        // Create an encryptor instance with a random salt generator
//        StringEncryptor encryptor = StringEncryptor.createEncryptor()
        StringEncryptor encryptor = new StringEncryptor("PBEWITHMD5AND256BITAES-CBC-OPENSSL", "BC", MASTER_KEY)

        logger.info("Cipher text: ${CIPHER_TEXT} ${cipherBytes.length}")
        logger.info("       Salt: ${CIPHER_TEXT[0..31]} 16")
        logger.info("         CT: ${CIPHER_TEXT[32..63]} 16")

        // Act
        String recovered = encryptor.decrypt(CIPHER_TEXT)
        logger.info("Recovered: ${recovered}")

        // Assert
        assert EXPECTED_PROCESSOR_PASSWORD.equals(recovered)
    }

    @Test
    public void testJasyptEncryptionShouldBeExternallyCompatible() throws Exception {
        // Arrange
        final String EXPECTED_PROCESSOR_PASSWORD = "password123"
        final String EXPECTED_IV = "25b55bb78a6c1711814bfa3469754246"

        // These values can be generated by running `$ ./openssl_brett_demo.rb` in the terminal
        final String MASTER_PASSPHRASE = "mybigsecretkey"

        // Create an encryptor instance with a random salt generator
//        StringEncryptor encryptor = StringEncryptor.createEncryptor()
        int iterations = 1
        def algorithm = "PBEWITHMD5AND256BITAES-CBC-OPENSSL"
        def provider = "BC"

        // Iterations currently overridden to 1 and salt fixed at 0-9a-ff-a9-0
        StringEncryptor encryptor = new StringEncryptor(algorithm, provider, MASTER_PASSPHRASE)

        logger.info("Algorithm: ${algorithm}")
        logger.info("Provider: ${provider}")
        logger.info("Passphrase: ${MASTER_PASSPHRASE}")
        logger.info("Iterations: ${iterations}")

        // Override the salt length so it is compatible with OpenSSL EVP_BytesToKey
//        encryptor.encryptor.byteEncryptor.saltSizeBytes = 8
        logger.info("Jasypt IV: ${Hex.toHexString(encryptor.encryptor.byteEncryptor.encryptCipher.getIV())}")
        int saltLengthBytes = encryptor.encryptor.byteEncryptor.saltSizeBytes

        // Act
        String cipherText = encryptor.encrypt(EXPECTED_PROCESSOR_PASSWORD)
        assert EXPECTED_PROCESSOR_PASSWORD.equals(encryptor.decrypt(cipherText))
        logger.info("Jasypt internally consistent")

//        String tmp = new String(copyOfDecryptCipher.doFinal(Hex.decode(cipherText)))
//        logger.info("Temp: ${tmp}")

        String salt = cipherText[0..<saltLengthBytes * 2]
        String ct = cipherText[saltLengthBytes * 2..-1]
        logger.info("Encrypted: ${cipherText}")
        logger.info("     Salt: ${salt}")
        logger.info("       CT: ${ct.padLeft(saltLengthBytes * 2, ' ')}")

        // Assert
//        Cipher cipher = Cipher.getInstance(algorithm, provider)
        Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5Padding", provider)

        byte[][] both = EVP_BytesToKey(32, 16, MessageDigest.getInstance("MD5"), Hex.decode(salt), MASTER_PASSPHRASE.bytes, iterations)
        byte[] keyBytes = both[0]
        byte[] ivBytes = both[1]

        logger.info("EVP_BytesToKey key: ${Hex.toHexString(keyBytes)}")
        logger.info("EVP_BytesToKey  IV: ${Hex.toHexString(ivBytes)}")

//        final PBEKeySpec pbeKeySpec = new PBEKeySpec(MASTER_PASSPHRASE.toCharArray())
//        final SecretKeyFactory factory = SecretKeyFactory.getInstance(algorithm, provider)
//        SecretKey tempKey = factory.generateSecret(pbeKeySpec)
//
//        final PBEParameterSpec parameterSpec = new PBEParameterSpec(salt.getBytes(StandardCharsets.UTF_8), iterations)
//        cipher.init(Cipher.DECRYPT_MODE, tempKey, parameterSpec)
        SecretKeySpec key = new SecretKeySpec(keyBytes, "AES")
        IvParameterSpec iv = new IvParameterSpec(ivBytes)
        cipher.init(Cipher.DECRYPT_MODE, key, iv)

        def derivedIv = Hex.toHexString(cipher.IV)
        logger.info("Derive IV: ${derivedIv}")
//        assert derivedIv == EXPECTED_IV

        String recovered = new String(cipher.doFinal(Hex.decode(ct)))

        assert recovered == EXPECTED_PROCESSOR_PASSWORD
    }

    @Test
    public void testShouldDetermineRubyKeyFormat() throws Exception {
        // Arrange
        final String EXPECTED_PROCESSOR_PASSWORD = "password123"
        final String RUBY_CIPHER_TEXT = "1338f2f1f5c019b1be686450d5937c52"

        byte[] keyBytes = Hex.decode('41c5ab2857ce071e998fe00744e0bb6196069075ff1bdc65962cd73eb4113409')
        byte[] ivBytes = Hex.decode('2e56cd6c3dc4f81129e2f56363586dc2')
//        byte[] keyBytes = Hex.decode('00' * 32)
//        byte[] ivBytes = Hex.decode('00' * 16)

        Cipher cipher = Cipher.getInstance("AES/CBC/PKCS5Padding", "BC")
        SecretKeySpec key = new SecretKeySpec(keyBytes, "AES")
        IvParameterSpec iv = new IvParameterSpec(ivBytes)
        cipher.init(Cipher.ENCRYPT_MODE, key, iv)

        // Act
        byte[] cipherBytes = cipher.doFinal(EXPECTED_PROCESSOR_PASSWORD.bytes)
        String cipherText = Hex.toHexString(cipherBytes)
        logger.info("Encrypted: ${cipherText}")

        // Assert
        assert cipherText == RUBY_CIPHER_TEXT
    }

    /**
     * Translated to Java by <a href="https://olabini.com/blog/2006/10/openssl-in-jruby/">Ola Bini</a> from the Ruby OpenSSL EVP_BytesToKey method.
     *
     * "The problem is that Ruby uses the function called EVP_BytesToKey, which, according to the documentation implements PKCS#5 1.5 with a few tricks up its sleeve. Not very nice. In the end I had to implement my own version of this to generate keys. And since I had to look like mad for this information, I will here give you the implementation to this function in Java. Just use the return value to initialize your own SecretKey-implementation and instantiate an IvParameterSpec and you should be set to go: (note, I release this into the public domain. And note, this is just quick, ported code to show the concept.)"
     *
     * Adapted to handle non-standard salt lengths for compatibility with NiFi Jasypt (hardcoded 16 byte salt for AES).
     *
     * @param key_len the desired key length in bytes
     * @param iv_len the desired IV length in bytes
     * @param md the digest
     * @param salt the salt (usually 8 bytes)
     * @param data the passphrase to derive the key from
     * @param count the iterations count
     * @return a 2-element array -- index 0 is the key, index 1 is the IV
     */
    public byte[][] EVP_BytesToKey(int key_len, int iv_len, MessageDigest md, byte[] salt, byte[] data, int count) {
        byte[][] both = new byte[2][];
        byte[] key = new byte[key_len];
        int key_ix = 0;
        byte[] iv = new byte[iv_len];
        int iv_ix = 0;
        both[0] = key;
        both[1] = iv;
        byte[] md_buf = null;
        int nkey = key_len;
        int niv = iv_len;
        int i = 0;
        int saltLength = salt.length
        if (data == null) {
            return both;
        }
        int addmd = 0;
        for (; ;) {
            md.reset();
            if (addmd++ > 0) {
                md.update(md_buf);
            }
            md.update(data);
            if (null != salt) {
                md.update(salt, 0, saltLength);
            }
            md_buf = md.digest();
            for (i = 1; i < count; i++) {
                md.reset();
                md.update(md_buf);
                md_buf = md.digest();
            }
            i = 0;
            if (nkey > 0) {
                for (; ;) {
                    if (nkey == 0) break;
                    if (i == md_buf.length) break;
                    key[key_ix++] = md_buf[i];
                    nkey--;
                    i++;
                }
            }
            if (niv > 0 && i != md_buf.length) {
                for (; ;) {
                    if (niv == 0) break;
                    if (i == md_buf.length) break;
                    iv[iv_ix++] = md_buf[i];
                    niv--;
                    i++;
                }
            }
            if (nkey == 0 && niv == 0) {
                break;
            }
        }
        for (i = 0; i < md_buf.length; i++) {
            md_buf[i] = 0;
        }
        return both;
    }
}
